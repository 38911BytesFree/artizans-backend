name: Deploy to AWS ECR and ECS

on:
  push:
    branches: [ FIXME ]

env:
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: artizans/webserver
  ECS_SERVICE: artizans_webserver
  ECS_CLUSTER: artizans
  ECS_TASK_DEFINITION: aws/ecs-task-definition.json
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Deploy to ECR and ECS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
          mask-password: 'false'

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Replace placeholders in task definition
      env:
        PORT: 8080
        ADDRESS: 0.0.0.0
        DYNAMO_DB_TABLE_NAME: artizans_production
        ENVIRONMENT: production
        REDIS_URL: redis://artizans_redis:6379
      run: |
        sed -i 's|${AWS_REGION}|'${{ env.AWS_REGION }}'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${AWS_ACCOUNT_ID}|'${{ env.AWS_ACCOUNT_ID }}'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${ECR_REGISTRY}|'${{ steps.login-ecr.outputs.registry }}'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${IMAGE_TAG}|'${{ env.IMAGE_TAG }}'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${PORT}|'$PORT'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${JWT_SECRET_KEY}|'$JWT_SECRET_KEY'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${ADDRESS}|'$ADDRESS'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${DYNAMO_DB_TABLE_NAME}|'$DYNAMO_DB_TABLE_NAME'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${ENVIRONMENT}|'$ENVIRONMENT'|g' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's|${REDIS_URL}|'$REDIS_URL'|g' ${{ env.ECS_TASK_DEFINITION }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: webserver
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true